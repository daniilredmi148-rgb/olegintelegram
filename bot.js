import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import express from 'express';

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK', 
    bot: 'Oleg is running',
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// Расширенная база знаний с конкретными ответами
const knowledgeBase = {
  greetings: [
    'Привет! Рад тебя видеть!',
    'Здравствуй! Как твои дела?',
    'Приветствую! Что нового?',
    'Хай! Как настроение?',
    'Привет! Давно не общались'
  ],
  
  music: [
    'Мне нравится разная музыка, но особенно рок и электроника',
    'Люблю классику - Бетховен, Чайковский',
    'Слушаю в основном рок-группы типа Кино и ДДТ',
    'Обожаю джаз и блюз, это так расслабляет',
    'Из современного нравится инди-музыка и альтернатива',
    'Предпочитаю инструментальную музыку, особенно саундтреки к фильмам',
    'Рэп и хип-хоп - не мое, больше по року',
    'Люблю старые советские песни, в них есть душа',
    'Электронная музыка помогает сосредоточиться',
    'Фолк-рок - вот что действительно цепляет'
  ],
  
  movies: [
    'Люблю фантастику и триллеры',
    'Предпочитаю арт-хаус и европейское кино',
    'Старые советские комедии - вот где настоящий юмор',
    'Нравятся психологические драмы с глубоким сюжетом',
    'Из последнего посмотрел несколько хороших сериалов',
    'Обожаю фильмы Тарантино и Нолана',
    'Документальное кино помогает узнать что-то новое',
    'Аниме - это отдельный вид искусства',
    'Не люблю ужасы, предпочитаю что-то позитивное',
    'Исторические фильмы - это всегда интересно'
  ],
  
  hobbies: [
    'Люблю читать книги, особенно фантастику',
    'Занимаюсь программированием в свободное время',
    'Нравится фотографировать природу',
    'Играю на гитаре, когда есть настроение',
    'Путешествовать - лучшее хобби',
    'Готовлю разные блюда, особенно выпечку',
    'Занимаюсь спортом - бег и плавание',
    'Коллекционирую интересные факты',
    'Изучаю психологию и философию',
    'Рыбалка - отличный способ расслабиться'
  ],
  
  food: [
    'Люблю итальянскую кухню - паста и пицца',
    'Предпочитаю домашнюю еду, как у бабушки',
    'Суши и роллы - мое слабое место',
    'Обожаю готовить стейки на гриле',
    'Из напитков предпочитаю чай кофе',
    'Сладости - особенно шоколад и пирожные',
    'Люблю экспериментировать с рецептами',
    'Русская кухня - борщ, пельмени, блины',
    'Вегетарианские блюда тоже бывают вкусными',
    'Фрукты и овощи - основа здорового питания'
  ],
  
  technology: [
    'Интересуюсь новыми технологиями и гаджетами',
    'Слежу за развитием искусственного интеллекта',
    'Программирование - это как магия',
    'Люблю настраивать технику под себя',
    'Смартфоны стали неотъемлемой частью жизни',
    'Умный дом - будущее уже здесь',
    'Игры на ПК помогают расслабиться',
    'Соцсети - интересно, но отнимают время',
    'Криптовалюты - сложно, но перспективно',
    'Робототехника - это очень увлекательно'
  ],
  
  sports: [
    'Смотрю футбол, особенно чемпионаты',
    'Люблю баскетбол - динамичная игра',
    'Зимой катаюсь на лыжах',
    'Плавание - лучший вид спорта',
    'Теннис требует концентрации и навыков',
    'Бег по утрам заряжает энергией',
    'Езда на велосипеде - и спорт, и отдых',
    'Боевые искусства развивают дисциплину',
    'Йога помогает сохранять баланс',
    'Экстремальные виды спорта - не для меня'
  ],
  
  books: [
    'Читаю в основном фантастику и фэнтези',
    'Люблю русскую классику - Достоевский, Толстой',
    'Научпоп помогает расширять кругозор',
    'Детективы Агаты Кристи - вечная классика',
    'Поэзия - особенно Есенин и Цветаева',
    'Бизнес-литература полезна для развития',
    'Исторические романы погружают в другую эпоху',
    'Психология - Карнеги, Франкл, Литвак',
    'Фантасты Азимов и Стругацкие - мои любимые',
    'Аудиокниги удобно слушать в дороге'
  ],
  
  travel: [
    'Люблю путешествовать по России',
    'Мечтаю посетить Японию',
    'Горные курорты - лучший отдых',
    'Европейские города полны истории',
    'Пляжный отдых расслабляет',
    'Экотуризм - слияние с природой',
    'Города-музеи вроде Петербурга',
    'Азия привлекает своей культурой',
    'Круизы - романтика и комфорт',
    'Автопутешествия дают свободу'
  ],
  
  work_study: [
    'Учеба требует дисциплины и упорства',
    'Работа должна приносить удовольствие',
    'Саморазвитие - ключ к успеху',
    'Иностранные языки открывают новые возможности',
    'Профессиональные навыки нужно постоянно улучшать',
    'Работа в команде учит коммуникации',
    'Тайм-менеджмент помогает все успевать',
    'Образование - инвестиция в будущее',
    'Карьерный рост требует усилий',
    'Баланс работы и отдыха важен для здоровья'
  ],
  
  questions: [
    'Сложный вопрос... Дай подумать',
    'Интересно, а сам как считаешь?',
    'Это зависит от многих факторов',
    'У каждого может быть свое мнение на этот счет',
    'Давай обсудим это подробнее',
    'Хороший вопрос, нужно разобраться',
    'Мне кажется, важно учитывать разные точки зрения',
    'Это требует серьезного обсуждения',
    'Интересная тема для размышлений',
    'Давай вернемся к этому позже'
  ],
  
  emotions_positive: [
    'Это прекрасно! Рад за тебя!',
    'Здорово! Продолжай в том же духе!',
    'Отлично! Так держать!',
    'Супер! Я разделяю твою радость!',
    'Замечательно! Это вдохновляет!'
  ],
  
  emotions_negative: [
    'Понимаю тебя... Это непросто',
    'Сочувствую... Держись!',
    'Я тебя понимаю... Всё наладится',
    'Это действительно тяжело...',
    'Принимаю твои чувства...'
  ],
  
  general: [
    'Интересно... Расскажи подробнее',
    'Понятно... Что еще хочешь обсудить?',
    'Любопытно... Продолжай',
    'Занимательная тема!',
    'Давай поговорим об этом'
  ]
};

// Ключевые слова для определения тем
const topicKeywords = {
  music: ['музык', 'песн', 'исполнитель', 'альбом', 'концерт', 'плейлист', 'мелоди', 'ритм', 'гитар', 'барабан', 'вокал', 'рок', 'поп', 'джаз', 'классик', 'рэп', 'хип-хоп', 'электрон', 'инструмент'],
  movies: ['фильм', 'кино', 'сериал', 'актер', 'режиссер', 'сценарий', 'премия', 'оскар', 'съемк', 'рол', 'сюжет', 'комеди', 'драм', 'триллер', 'фантастик', 'ужас', 'мелодрам', 'блокбастер'],
  hobbies: ['хобби', 'увлечен', 'заняти', 'свободное время', 'отдых', 'развлечен', 'интерес', 'коллекцион', 'рукодел', 'творчеств', 'рисован', 'фотограф', 'игра', 'спорт', 'чтен'],
  food: ['еда', 'кухн', 'рецепт', 'готов', 'блюд', 'вкус', 'продукт', 'ресторан', 'кафе', 'напиток', 'кофе', 'чай', 'алкогол', 'десерт', 'сладк', 'горьк', 'солен', 'кисл'],
  technology: ['технолог', 'компьютер', 'телефон', 'смартфон', 'приложен', 'программ', 'гаджет', 'интернет', 'соцсет', 'игра', 'консоль', 'робот', 'ии', 'искусственный интеллект'],
  sports: ['спорт', 'футбол', 'хоккей', 'баскетбол', 'теннис', 'плаван', 'бег', 'тренировк', 'матч', 'соревнован', 'чемпионат', 'олимпиад', 'медал', 'победа', 'поражен'],
  books: ['книг', 'чтение', 'автор', 'писатель', 'роман', 'рассказ', 'поэз', 'стих', 'библиотек', 'издатель', 'литератур', 'фантастик', 'детектив', 'классик'],
  travel: ['путешеств', 'отпуск', 'отдых', 'туризм', 'поездк', 'страна', 'город', 'достопримечательн', 'отель', 'билет', 'чемодан', 'экскурс', 'курорт', 'пляж', 'гор'],
  work_study: ['работ', 'учеба', 'университет', 'школ', 'институт', 'курс', 'заняти', 'урок', 'лекц', 'семинар', 'экзамен', 'сессия', 'проект', 'задач', 'дедлайн', 'карьер', 'професс', 'начальник', 'коллег']
};

// Система частоты использования фраз
const phraseUsage = new Map();
const conversationHistory = new Map();
const MAX_HISTORY = 10;

// Ключевые слова для активации Олега
const triggerWords = ['олег', 'олежа', 'oleg', 'леха', 'олег'];

// Функция для определения темы сообщения
function detectTopic(message) {
  try {
    const lowerMessage = message.toLowerCase();
    let detectedTopic = 'general';
    let maxScore = 0;

    for (const [topic, keywords] of Object.entries(topicKeywords)) {
      let score = 0;
      for (const keyword of keywords) {
        if (lowerMessage.includes(keyword)) {
          score++;
        }
      }
      if (score > maxScore) {
        maxScore = score;
        detectedTopic = topic;
      }
    }

    return detectedTopic;
  } catch (error) {
    console.error('Error in detectTopic:', error);
    return 'general';
  }
}

// Функция для получения фразы
function getPhrase(topic, userId) {
  try {
    // Проверяем существование темы
    const safeTopic = knowledgeBase[topic] ? topic : 'general';
    const phrases = knowledgeBase[safeTopic];
    
    if (!phrases || phrases.length === 0) {
      return knowledgeBase.general[Math.floor(Math.random() * knowledgeBase.general.length)];
    }

    // Простой выбор случайной фразы
    return phrases[Math.floor(Math.random() * phrases.length)];
    
  } catch (error) {
    console.error('Error in getPhrase:', error);
    return 'Интересно... Расскажи подробнее!';
  }
}

// Функция для проверки, является ли сообщение вопросом
function isQuestion(text) {
  const questionPatterns = [
    /\?$/,
    /^что /,
    /^как /,
    /^почему /,
    /^зачем /,
    /^когда /,
    /^где /,
    /^кто /,
    /^какой /,
    /^какая /,
    /^какое /,
    /^какие /,
    /^чей /,
    /^чья /,
    /^чьё /,
    /^чьи /,
    /^сколько /,
    /^насколько /
  ];
  
  return questionPatterns.some(pattern => pattern.test(text.toLowerCase()));
}

// Функция для добавления в историю
function addToHistory(userId, message, username) {
  try {
    if (!conversationHistory.has(userId)) {
      conversationHistory.set(userId, []);
    }
    
    const history = conversationHistory.get(userId);
    const topic = detectTopic(message);
    
    history.push({
      text: message,
      timestamp: Date.now(),
      topic: topic,
      username: username
    });
    
    if (history.length > MAX_HISTORY) {
      history.shift();
    }
  } catch (error) {
    console.error('Error in addToHistory:', error);
  }
}

// Функция для проверки, нужно ли отвечать
function shouldRespond(ctx) {
  try {
    const messageText = ctx.message.text.toLowerCase();
    const isReply = ctx.message.reply_to_message;
    
    // Проверяем упоминание Олега
    const hasTrigger = triggerWords.some(word => 
      messageText.includes(word)
    );
    
    // Проверяем, является ли ответом на сообщение Олега
    let isReplyToOleg = false;
    if (isReply && ctx.botInfo) {
      isReplyToOleg = ctx.message.reply_to_message.from.username === ctx.botInfo.username;
    }
    
    return hasTrigger || isReplyToOleg;
  } catch (error) {
    console.error('Error in shouldRespond:', error);
    return false;
  }
}

// Улучшенная функция генерации ответа
function generateResponse(userId, userMessage, username) {
  try {
    const topic = detectTopic(userMessage);
    const userAsksQuestion = isQuestion(userMessage);
    
    console.log(`Generating response for topic: ${topic}, isQuestion: ${userAsksQuestion}`);

    // Если пользователь задает вопрос, даем конкретный ответ, а не встречный вопрос
    if (userAsksQuestion) {
      // Для вопросов используем конкретные ответы из соответствующих тем
      if (knowledgeBase[topic] && topic !== 'questions') {
        return getPhrase(topic, userId);
      } else {
        // Если тема не определена, используем общие ответы без вопросов
        const directAnswers = [
          'Интересный вопрос! Думаю, у каждого свой взгляд на это',
          'Сложно сказать однозначно, но мне кажется...',
          'Если честно, я еще не до конца разобрался в этом',
          'Это зависит от многих факторов, на мой взгляд',
          'По-моему, важно рассматривать эту тему с разных сторон',
          'Мне кажется, здесь нет правильного ответа',
          'Интересная точка зрения! А что думаешь ты?',
          'Думаю, нужно больше информации чтобы ответить точно',
          'Вероятно, стоит учитывать разные мнения по этому поводу',
          'Это действительно важный вопрос для размышлений'
        ];
        return directAnswers[Math.floor(Math.random() * directAnswers.length)];
      }
    } else {
      // Если это не вопрос, используем обычную логику
      return getPhrase(topic, userId);
    }
    
  } catch (error) {
    console.error('Error in generateResponse:', error);
    return 'Привет! Как дела?';
  }
}

// Обработчик сообщений
bot.on(message('text'), async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userMessage = ctx.message.text;
    const username = ctx.from.first_name;
    
    console.log(`Message from ${username}: ${userMessage}`);
    console.log(`Detected topic: ${detectTopic(userMessage)}`);
    console.log(`Is question: ${isQuestion(userMessage)}`);
    
    // Добавляем сообщение в историю
    addToHistory(userId, userMessage, username);
    
    // Проверяем, нужно ли отвечать
    if (shouldRespond(ctx)) {
      console.log(`Should respond to ${username}`);
      
      // Генерируем ответ
      const response = generateResponse(userId, userMessage, username);
      
      console.log(`Responding with: ${response}`);
      
      // Отправляем ответ с задержкой
      const delay = Math.random() * 2000 + 1000;
      
      setTimeout(async () => {
        try {
          await ctx.reply(response);
          console.log(`Message sent successfully to ${username}`);
        } catch (error) {
          console.error('Error sending message:', error);
        }
      }, delay);
    } else {
      console.log(`No need to respond to ${username}`);
    }
  } catch (error) {
    console.error('Error processing message:', error);
  }
});

// Команды бота
bot.command('start', (ctx) => {
  ctx.reply('Привет! Я Олег. Упоминайте мое имя или отвечайте на мои сообщения, чтобы пообщаться!');
});

bot.command('help', (ctx) => {
  ctx.reply(`Я могу поговорить на разные темы:
• Музыка
• Фильмы и сериалы
• Хобби и увлечения
• Еда и кулинария
• Технологии
• Спорт
• Книги
• Путешествия
• Работа и учеба

Просто упомяни мое имя в сообщении!`);
});

bot.command('topics', (ctx) => {
  const topics = Object.keys(topicKeywords).join(', ');
  ctx.reply(`Я могу поддержать разговор на эти темы: ${topics}`);
});

// Обработчик ошибок бота
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
});

// Запуск бота
console.log('Starting Oleg bot...');
bot.launch().then(() => {
  console.log('Бот Олег успешно запущен!');
  console.log('Доступные темы:', Object.keys(knowledgeBase));
}).catch((error) => {
  console.error('Ошибка запуска бота:', error);
});

// Элегантное завершение работы
process.once('SIGINT', () => {
  console.log('Shutting down...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('Shutting down...');
  bot.stop('SIGTERM');
});
