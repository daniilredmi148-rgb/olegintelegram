const { Telegraf } = require('telegraf');
const express = require('express');
const cron = require('node-cron');
const storage = require('node-persist');
const natural = require('natural');

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
await storage.init();
await storage.setItem('conversations', await storage.getItem('conversations') || []);
await storage.setItem('userContext', await storage.getItem('userContext') || {});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
let keepAliveChatId = null;
let isLearningActive = true;

// üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –û–ª–µ–≥–∞
const olegPersonality = {
    name: "–û–ª–µ–≥",
    age: "14",
    interests: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–æ–±—É—á–µ–Ω–∏–µ", "–º—É–∑—ã–∫–∞"],
    traits: ["–∑–ª–æ–π", "–∫—Ä–∞—Å–∏–≤—ã–π", "–∏–Ω–æ–≥–¥–∞ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"],
    learningLevel: "–Ω–∞—á–∞–ª—å–Ω—ã–π"
};

// üìö –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—Ä–∞–∑ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
const initialKnowledge = [
    { question: "–ø—Ä–∏–≤–µ—Ç", answers: ["–ü—Ä–∏–≤–µ—Ç! –Ø –û–ª–µ–≥.", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!"] },
    { question: "–∫–∞–∫ –¥–µ–ª–∞", answers: ["–û—Ç–ª–∏—á–Ω–æ! –£—á—É—Å—å –Ω–æ–≤–æ–º—É.", "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞ —É —Ç–µ–±—è?", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—É—á–∞—Ç—å—Å—è!"] },
    { question: "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", answers: ["–Ø —É—á—É—Å—å –∏–∑ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ!", "–ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—à–∏ –±–µ—Å–µ–¥—ã."] },
    { question: "–∫—Ç–æ —Ç—ã", answers: ["–Ø –û–ª–µ–≥, —Å–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è –±–æ—Ç!", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –û–ª–µ–≥, —è –≥–ª–∞–≤–Ω—ã–π —Ö–µ–π—Ç–µ—Ä —Ä—É—Å–∏—á–∫–∏."] },
    { question: "–ø–æ–∫–∞", answers: ["–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", "–£–≤–∏–¥–∏–º—Å—è!", "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!"] }
];

// üéØ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è keep-alive
const randomMessages = [
    "üí≠ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º –≤—ã —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç–µ...",
    "ü§î –Ø —Ç—É—Ç –ø–æ–¥—É–º–∞–ª, —á—Ç–æ —à–∫–æ–ª–∞ —Ö—É–π–Ω—è",
    "üìö –ò–∑—É—á–∞—é –Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
    "üí° –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º!",
    "üéØ –ü—Ä–æ–¥–æ–ª–∂–∞—é –Ω–∞–±–ª—é–¥–∞—Ç—å –∏ –æ–±—É—á–∞—Ç—å—Å—è",
    "üß† –ú–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ —Å –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç–æ–π",
    "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ",
    "üåü –†—É—Å–∏—á–∫–∞ –∏–¥–∏ –Ω–∞—Ö—É–π"
];

// üßÆ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
function tokenizeText(text) {
    return text.toLowerCase()
        .replace(/[^\w\s–∞-—è—ë]/gi, '')
        .split(/\s+/)
        .filter(word => word.length > 2);
}

function findSimilarQuestion(input, knowledgeBase) {
    const inputTokens = tokenizeText(input);
    
    let bestMatch = null;
    let bestScore = 0;
    
    knowledgeBase.forEach(item => {
        const questionTokens = tokenizeText(item.question);
        const commonWords = inputTokens.filter(word => 
            questionTokens.some(qWord => natural.JaroWinklerDistance(word, qWord) > 0.8)
        );
        
        const score = commonWords.length / Math.max(inputTokens.length, questionTokens.length);
        
        if (score > bestScore && score > 0.3) {
            bestScore = score;
            bestMatch = item;
        }
    });
    
    return bestMatch;
}

// üíæ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
async function saveConversation(userId, userMessage, botResponse) {
    const conversations = await storage.getItem('conversations') || [];
    const userContext = await storage.getItem('userContext') || {};
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    conversations.push({
        userId,
        userMessage,
        botResponse,
        timestamp: new Date().toISOString()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π)
    if (conversations.length > 1000) {
        conversations.splice(0, conversations.length - 1000);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userContext[userId]) {
        userContext[userId] = {
            messageCount: 0,
            lastTopics: [],
            personalityTraits: {}
        };
    }
    
    userContext[userId].messageCount++;
    userContext[userId].lastTopics.push(userMessage.slice(0, 50));
    
    if (userContext[userId].lastTopics.length > 10) {
        userContext[userId].lastTopics.shift();
    }
    
    await storage.setItem('conversations', conversations);
    await storage.setItem('userContext', userContext);
}

async function learnFromConversation(userMessage, botResponse) {
    const knowledge = await storage.getItem('knowledge') || initialKnowledge;
    const tokens = tokenizeText(userMessage);
    
    if (tokens.length >= 2) {
        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        const similar = findSimilarQuestion(userMessage, knowledge);
        
        if (!similar) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
            knowledge.push({
                question: userMessage.toLowerCase(),
                answers: [botResponse],
                learnedFrom: new Date().toISOString(),
                usageCount: 1
            });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            if (!similar.answers.includes(botResponse)) {
                similar.answers.push(botResponse);
            }
            similar.usageCount = (similar.usageCount || 1) + 1;
        }
        
        await storage.setItem('knowledge', knowledge);
    }
}

async function generateResponse(userMessage, userId) {
    const knowledge = await storage.getItem('knowledge') || initialKnowledge;
    const userContext = await storage.getItem('userContext') || {};
    const userData = userContext[userId] || {};
    
    // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const similar = findSimilarQuestion(userMessage, knowledge);
    
    if (similar) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const randomAnswer = similar.answers[Math.floor(Math.random() * similar.answers.length)];
        
        // –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (userData.messageCount > 5 && Math.random() > 0.7) {
            const personalizedComments = [
                " –ö—Å—Ç–∞—Ç–∏, —è –ø–æ–º–Ω—é –Ω–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!",
                " –ö–∞–∫ —è —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª, —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å.",
                " –° –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è –ª—É—á—à–µ!"
            ];
            return randomAnswer + personalizedComments[Math.floor(Math.random() * personalizedComments.length)];
        }
        
        return randomAnswer;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    const defaultResponses = [
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –Ø –µ—â–µ –Ω–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å —Ç–∞–∫–∏–º. –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
        "–ü–æ–Ω—è–ª —Ç–µ–±—è! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏ –±—É–¥—É —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å.",
        "–•–º, —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –Ø –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.",
        "–ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—É—á–∞—Ç—å—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!",
        "–ó–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ—Ç–≤–µ—á—É –ª—É—á—à–µ!"
    ];
    
    const response = defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    await learnFromConversation(userMessage, response);
    
    return response;
}

// üîÑ Keep-alive —Å–∏—Å—Ç–µ–º–∞
function startKeepAliveSystem(chatId) {
    if (keepAliveChatId) return;
    
    keepAliveChatId = chatId;
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –û–ª–µ–≥–∞...');
    
    // –ö–∞–∂–¥—ã–µ 7 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    cron.schedule('*/7 * * * *', async () => {
        if (!keepAliveChatId) return;
        
        try {
            const randomMessage = randomMessages[Math.floor(Math.random() * randomMessages.length)];
            console.log(`‚è∞ –û–ª–µ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç keep-alive: ${randomMessage}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const sentMessage = await bot.telegram.sendMessage(keepAliveChatId, randomMessage);
            
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            setTimeout(async () => {
                try {
                    await bot.telegram.deleteMessage(keepAliveChatId, sentMessage.message_id);
                    console.log('‚úÖ Keep-alive —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
                } catch (deleteError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è keep-alive —Å–æ–æ–±—â–µ–Ω–∏—è:', deleteError.message);
                }
            }, 60000); // 1 –º–∏–Ω—É—Ç–∞
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keep-alive —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }
    });
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞');
}

// üëã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    const welcomeMessage = `ü§ñ <b>–ü—Ä–∏–≤–µ—Ç, —è –û–ª–µ–≥!</b>\n\n` +
        `–Ø - —Å–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º!\n\n` +
        `üß† <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n` +
        `‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n` +
        `‚Ä¢ –£—á–∏—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n` +
        `‚Ä¢ –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏\n` +
        `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã\n\n` +
        `üí° <b>–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!</b>\n` +
        `–ß–µ–º –±–æ–ª—å—à–µ –º—ã –≥–æ–≤–æ—Ä–∏–º, —Ç–µ–º —É–º–Ω–µ–µ —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å.\n\n` +
        `‚öôÔ∏è <i>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞</i>`;
    
    await ctx.replyWithHTML(welcomeMessage);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (ctx.chat.type !== 'private') {
        startKeepAliveSystem(ctx.chat.id);
    }
});

bot.command('status', async (ctx) => {
    const knowledge = await storage.getItem('knowledge') || initialKnowledge;
    const conversations = await storage.getItem('conversations') || [];
    
    const statusMessage = `üìä <b>–°—Ç–∞—Ç—É—Å –û–ª–µ–≥–∞</b>\n\n` +
        `üß† <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:</b> ${knowledge.length} –≤–æ–ø—Ä–æ—Å–æ–≤\n` +
        `üíæ <b>–†–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ:</b> ${conversations.length}\n` +
        `üîß <b>–û–±—É—á–µ–Ω–∏–µ:</b> ${isLearningActive ? '–ê–ö–¢–ò–í–ù–û' : '–ü–ê–£–ó–ê'}\n` +
        `‚è∞ <b>Keep-alive:</b> ${keepAliveChatId ? '–ó–ê–ü–£–©–ï–ù' : '–û–°–¢–ê–ù–û–í–õ–ï–ù'}\n\n` +
        `üí° <i>–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—Ç—É –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å!</i>`;
    
    await ctx.replyWithHTML(statusMessage);
});

bot.command('learn', async (ctx) => {
    isLearningActive = !isLearningActive;
    await ctx.reply(isLearningActive ? 
        'üß† <b>–û–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!</b> –Ø —Å–Ω–æ–≤–∞ —É—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.' :
        '‚è∏ <b>–û–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b> –Ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞—é —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.',
        { parse_mode: 'HTML' }
    );
});

// üéØ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        const userMessage = ctx.message.text;
        const userId = ctx.from.id;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (userMessage.startsWith('/')) return;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = await generateResponse(userMessage, userId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await ctx.reply(response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if (isLearningActive) {
            await saveConversation(userId, userMessage, response);
            console.log(`üíæ –û–ª–µ–≥ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
    }
});

// üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Render.com
app.use(express.json());

app.post(`/webhook`, async (req, res) => {
    try {
        await bot.handleUpdate(req.body);
        res.sendStatus(200);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
        res.sendStatus(200);
    }
});

app.get('/', (req, res) => {
    res.json({ 
        status: '–ë–æ—Ç –û–ª–µ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        learningActive: isLearningActive,
        keepAliveActive: !!keepAliveChatId 
    });
});

// üì° –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`ü§ñ –ë–æ—Ç –û–ª–µ–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üß† –û–±—É—á–µ–Ω–∏–µ: ${isLearningActive ? '–∞–∫—Ç–∏–≤–Ω–æ' : '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const existingKnowledge = await storage.getItem('knowledge');
    if (!existingKnowledge) {
        await storage.setItem('knowledge', initialKnowledge);
        console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è production
    if (process.env.RENDER_EXTERNAL_URL) {
        const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
        await bot.telegram.setWebhook(webhookUrl);
        console.log(`üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        bot.launch();
        console.log('üîÆ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
});

// üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ –û–ª–µ–≥–∞:`, err);
});
